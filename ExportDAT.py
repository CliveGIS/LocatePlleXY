# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ExportDAT
                                 A QGIS plugin
 ExportDAT
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-06
        git sha              : $Format:%H$
        copyright            : (C) 2025 by California29
        email                : gabrieltorue@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QDockWidget

# Initialize Qt resources from file resources.py
# from .resources import *
# Import the code for the dialog
# from .ExportDAT_dialog import ExportDATDialog
import os.path


from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import QgsProject
from .ExportDAT_dialog import ExportDATDockWidget


import os

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
# from .resources import *
# Import the code for the dialog
# from .ExportDAT_dialog import ExportDATDialog
import os.path

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import QgsProject
# from .ExportDAT_dialog import ExportDATDialog
import os

class ExportDAT:
    def __init__(self, iface):
        self.iface = iface
        self.action = None
        self.dialog = None
        self.toolbar = None  # Ajout d'une r√©f√©rence pour la barre d'outils

    def initGui(self):
        # Cr√©er l'action avec une ic√¥ne
        icon_path = os.path.join(os.path.dirname(__file__), 'icon.png')
        self.action = QAction(
            QIcon(icon_path),  # Chemin vers votre ic√¥ne
            "Exporter DAT", 
            self.iface.mainWindow()
        )
        
        # Connecter l'action
        self.action.triggered.connect(self.run)
        
        # Ajouter au menu
        self.iface.addPluginToMenu("&ExportDAT", self.action)
        
        # Ajouter √† la barre d'outils
        self.toolbar = self.iface.addToolBar("ExportDAT Toolbar")
        self.toolbar.addAction(self.action)

    def unload(self):
        if self.dialog:
            self.iface.removeDockWidget(self.dialog)
            self.dialog = None

        # Supprimer du menu
        self.iface.removePluginMenu("&ExportDAT", self.action)
        
        # Supprimer de la barre d'outils
        if self.toolbar:
            self.toolbar.removeAction(self.action)
            del self.toolbar

    def run(self):
        if not self.dialog:
            self.dialog = ExportDATDockWidget(self.iface.mainWindow())
            
            # Ajouter dans la zone droite
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dialog)

            # üîÅ Tenter de le tabifier avec le panneau "explorateur"
            for widget in self.iface.mainWindow().findChildren(QDockWidget):
                if widget.windowTitle().lower() == "explorateur":
                    self.iface.mainWindow().tabifyDockWidget(widget, self.dialog)
                    break

            # Connecter une seule fois
            self.dialog.export_button.clicked.connect(self.handle_export_click)

        self.dialog.show()
        self.dialog.raise_()
        self.populate_comboboxes()


    def populate_comboboxes(self):
        layers = QgsProject.instance().mapLayersByName("bornes")
        if not layers:
            QMessageBox.warning(None, "Erreur", "La couche 'bornes' est introuvable.")
            return
        layer = layers[0]

        natures = set()
        indices = set()

        for feature in layer.getFeatures():
            natures.add(str(feature["nature"]))
            indices.add(str(feature["indice"]))

        self.dialog.nature_combo.clear()
        self.dialog.nature_combo.addItems(sorted(natures))

        self.dialog.indice_combo.clear()
        self.dialog.indice_combo.addItems(sorted(indices))

    def handle_export_click(self):
        nature = self.dialog.nature_combo.currentText()
        indice = self.dialog.indice_combo.currentText()
        numero = self.dialog.numero_input.text()
        self.export_dat(nature, numero, indice)

    def export_dat(self, nature, numero, indice):
        titref_base = f"{nature}{numero}/{indice}"
        layers = QgsProject.instance().mapLayersByName("bornes")
        if not layers:
            QMessageBox.warning(None, "Erreur", "La couche 'bornes' est introuvable.")
            return
        layer = layers[0]

        if layer.geometryType() != 0:
            QMessageBox.warning(None, "Erreur", "La couche 'bornes' n'est pas une couche de points.")
            return

        # Filtrer tous les titref commen√ßant par titref_base
        features = [f for f in layer.getFeatures() if str(f["titref"]).startswith(titref_base)]

        if not features:
            QMessageBox.warning(None, "Aucune donn√©e", f"Aucune entit√© trouv√©e avec titref = {titref_base}")
            return

        # Grouper les entit√©s par titref exact
        from collections import defaultdict
        grouped = defaultdict(list)
        for f in features:
            grouped[f["titref"]].append(f)

        # Pr√©parer l‚Äô√©criture du fichier
        default_filename = f"{nature}{numero}-{indice}.txt"
        filepath, _ = QFileDialog.getSaveFileName(
            None,
            "Enregistrer le fichier DAT",
            default_filename,
            "Text Files (*.txt)"
        )
        if not filepath:
            return

        with open(filepath, "w") as f:
            for titref, group in grouped.items():
                group.sort(key=lambda feat: feat["ord"])
                f.write(titref + "\n")
                f.write("\n\n\n")
                f.write(str(len(group)) + "\n")
                for feat in group:
                    f.write(f"{feat['name']} {feat['x']} {feat['y']}\n")

        QMessageBox.information(None, "Succ√®s", f"{len(grouped)} parcelle(s) export√©e(s) avec succ√®s.")
