# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LocatePlleXY
                                 A QGIS plugin
 Plugin de recherche et localisation par coordonnées XY ou identifiant parcellaire (Nature, Numéro, Indice)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-23
        git sha              : $Format:%H$
        copyright            : (C) 2025 by California29
        email                : gabrieltorue@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.core import QgsPointXY, QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject
from qgis.utils import iface

# # Initialize Qt resources from file resources.py
# from .resources import *
# Import the code for the dialog
from .LocatePlleXY_dialog import LocatePlleXYDialog
import os.path


class LocatePlleXY:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.button_connections_done = False
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LocatePlleXY_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Localisation Plle et XY')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        # self.button_connections_done = False
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('LocatePlleXY', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/LocatePlleXY/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Localisation Plle et XY'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Localisation Plle et XY'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if not hasattr(self, 'dlg'):
            self.dlg = LocatePlleXYDialog()

        self.dlg.show()

        # Remplir la combo des couches
        self.dlg.comboLayer.clear()
        for layer in QgsProject.instance().mapLayers().values():
            if layer.type() == layer.VectorLayer:
                self.dlg.comboLayer.addItem(layer.name(), layer.id())

        # Évite de connecter les boutons plusieurs fois
        if not self.button_connections_done:
            self.dlg.btnLocate.clicked.connect(self.locate_coordinates)
            self.dlg.btnLocateByID.clicked.connect(self.locate_by_parcelle)
            self.button_connections_done = True


    def locate_coordinates(self):
        from qgis.core import (
            QgsPointXY,
            QgsCoordinateReferenceSystem,
            QgsCoordinateTransform,
            QgsProject
        )
        from qgis.PyQt.QtWidgets import QMessageBox
        from qgis.gui import QgsVertexMarker
        from PyQt5.QtGui import QColor

        try:
            x = float(self.dlg.lineEdit_x.text())
            y = float(self.dlg.lineEdit_y.text())

            crs_src = QgsCoordinateReferenceSystem("EPSG:26191")  # Lambert Maroc Nord Zone 1
            crs_dest = self.iface.mapCanvas().mapSettings().destinationCrs()

            transform = QgsCoordinateTransform(crs_src, crs_dest, QgsProject.instance())
            point_lambert = QgsPointXY(x, y)
            point_proj = transform.transform(point_lambert)

            # Centrer la carte
            self.iface.mapCanvas().setCenter(point_proj)
            self.iface.mapCanvas().zoomScale(5000)
            self.iface.mapCanvas().refresh()

            # Supprimer l'ancien marqueur s'il existe
            if hasattr(self, 'marker') and self.marker is not None:
                self.iface.mapCanvas().scene().removeItem(self.marker)

            # Ajouter un nouveau marqueur rouge
            self.marker = QgsVertexMarker(self.iface.mapCanvas())
            self.marker.setCenter(point_proj)
            self.marker.setColor(QColor(255, 0, 0))  # Rouge
            self.marker.setIconSize(12)
            self.marker.setIconType(QgsVertexMarker.ICON_CROSS)  # ou ICON_BOX, ICON_X
            self.marker.setPenWidth(3)

        except Exception as e:
            QMessageBox.warning(None, "Erreur", f"Erreur lors de la localisation :\n{str(e)}")
    def locate_by_parcelle(self):
        from qgis.core import (
            QgsProject, QgsExpression, QgsFeatureRequest, QgsRectangle
        )
        from qgis.PyQt.QtWidgets import QMessageBox

        try:
            nature = self.dlg.lineEdit_nature.text().strip()
            numero = self.dlg.lineEdit_numero.text().strip()
            indice = self.dlg.lineEdit_indice.text().strip()

            if not nature or not numero or not indice:
                QMessageBox.warning(None, "Champs manquants", "Veuillez remplir tous les champs : Nature, Numéro et Indice.")
                return

            # Récupérer la couche sélectionnée
            idx = self.dlg.comboLayer.currentIndex()
            layer_id = self.dlg.comboLayer.itemData(idx)
            layer = QgsProject.instance().mapLayer(layer_id)

            if not layer:
                QMessageBox.warning(None, "Erreur", "Aucune couche valide sélectionnée.")
                return

            # Requête SQL — adapte les noms de champs si nécessaire
            expression = f""""Nature" = '{nature}' AND "Num" = '{numero}' AND "indice" = '{indice}'"""
            request = QgsFeatureRequest().setFilterExpression(expression)

            matching_features = [f for f in layer.getFeatures(request)]

            if not matching_features:
                QMessageBox.information(None, "Aucune parcelle", "Aucune parcelle trouvée avec ces identifiants.")
                return

            # Obtenir les IDs des entités
            ids = [f.id() for f in matching_features]

            # Sélectionner les entités dans la couche
            layer.removeSelection()
            layer.selectByIds(ids)

            # Zoomer sur l’étendue combinée des entités sélectionnées
            extent = matching_features[0].geometry().boundingBox()
            for f in matching_features[1:]:
                extent.combineExtentWith(f.geometry().boundingBox())

            self.iface.mapCanvas().setExtent(extent)
            self.iface.mapCanvas().refresh()

        except Exception as e:
            QMessageBox.warning(None, "Erreur", f"Erreur lors de la recherche :\n{str(e)}")
